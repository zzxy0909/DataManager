// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by the Game Data Editor.
//
//      Changes to this file will be lost if the code is regenerated.
//
//      This file was generated from this data file:
//      /Users/EthanW/Documents/UnityProjects/EPoker/Assets/GameDataEditor/Resources/gde_data.txt
//  </autogenerated>
// ------------------------------------------------------------------------------
using UnityEngine;
using System;
using System.Collections.Generic;

using GameDataEditor;

namespace GameDataEditor
{
    public class GDETest2SchemaData : IGDEData
    {
        static string TestBoolKey = "TestBool";
		bool _TestBool;
        public bool TestBool
        {
            get { return _TestBool; }
            set {
                if (_TestBool != value)
                {
                    _TestBool = value;
					GDEDataManager.SetBool(_key, TestBoolKey, _TestBool);
                }
            }
        }

        static string TestIntListKey = "TestIntList";
		public List<int>      TestIntList;
		public void Set_TestIntList()
        {
	        GDEDataManager.SetIntList(_key, TestIntListKey, TestIntList);
		}
		

        public GDETest2SchemaData(string key) : base(key)
        {
            GDEDataManager.RegisterItem(this.SchemaName(), key);
        }
        public override Dictionary<string, object> SaveToDict()
		{
			var dict = new Dictionary<string, object>();
			dict.Add(GDMConstants.SchemaKey, "Test2Schema");
			
            dict.Merge(true, TestBool.ToGDEDict(TestBoolKey));

            dict.Merge(true, TestIntList.ToGDEDict(TestIntListKey));
            return dict;
		}

        public override void UpdateCustomItems(bool rebuildKeyList)
        {
        }

        public override void LoadFromDict(string dataKey, Dictionary<string, object> dict)
        {
            _key = dataKey;

			if (dict == null)
				LoadFromSavedData(dataKey);
			else
			{
                dict.TryGetBool(TestBoolKey, out _TestBool);

                dict.TryGetIntList(TestIntListKey, out TestIntList);
                LoadFromSavedData(dataKey);
			}
		}

        public override void LoadFromSavedData(string dataKey)
		{
			_key = dataKey;
			
            _TestBool = GDEDataManager.GetBool(_key, TestBoolKey, _TestBool);

            TestIntList = GDEDataManager.GetIntList(_key, TestIntListKey, TestIntList);
        }

        public GDETest2SchemaData ShallowClone()
		{
			string newKey = Guid.NewGuid().ToString();
			GDETest2SchemaData newClone = new GDETest2SchemaData(newKey);

            newClone.TestBool = TestBool;

            newClone.TestIntList = new List<int>(TestIntList);
			newClone.Set_TestIntList();

            return newClone;
		}

        public GDETest2SchemaData DeepClone()
		{
			GDETest2SchemaData newClone = ShallowClone();
            return newClone;
		}

        public void Reset_TestBool()
        {
            GDEDataManager.ResetToDefault(_key, TestBoolKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetBool(TestBoolKey, out _TestBool);
        }

        public void Reset_TestIntList()
        {
	        GDEDataManager.ResetToDefault(_key, TestIntListKey);

	        Dictionary<string, object> dict;
	        GDEDataManager.Get(_key, out dict);
	        dict.TryGetIntList(TestIntListKey, out TestIntList);
        }
		

        public void ResetAll()
        {
            GDEDataManager.ResetToDefault(_key, TestBoolKey);
            GDEDataManager.ResetToDefault(_key, TestIntListKey);


            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            LoadFromDict(_key, dict);
        }
    }
}
