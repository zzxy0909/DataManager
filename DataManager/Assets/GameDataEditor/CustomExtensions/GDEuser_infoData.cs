// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by the Game Data Editor.
//
//      Changes to this file will be lost if the code is regenerated.
//
//      This file was generated from this data file:
//      C:\Users\keyte\Documents\GitHub\DataManager\DataManager\Assets/GameDataEditor/Resources/gde_data.txt
//  </autogenerated>
// ------------------------------------------------------------------------------
using UnityEngine;
using System;
using System.Collections.Generic;

using GameDataEditor;

namespace GameDataEditor
{
    public class GDEuser_infoData : IGDEData
    {
        static string nicknameKey = "nickname";
		string _nickname;
        public string nickname
        {
            get { return _nickname; }
            set {
                if (_nickname != value)
                {
                    _nickname = value;
					GDEDataManager.SetString(_key, nicknameKey, _nickname);
                }
            }
        }

        static string ln_play_scoreKey = "ln_play_score";
		public List<float>      ln_play_score;
		public void Set_ln_play_score()
        {
	        GDEDataManager.SetFloatList(_key, ln_play_scoreKey, ln_play_score);
		}
		
        static string ln_goldKey = "ln_gold";
		public List<float>      ln_gold;
		public void Set_ln_gold()
        {
	        GDEDataManager.SetFloatList(_key, ln_goldKey, ln_gold);
		}
		

        public GDEuser_infoData(string key) : base(key)
        {
            GDEDataManager.RegisterItem(this.SchemaName(), key);
        }
        public override Dictionary<string, object> SaveToDict()
		{
			var dict = new Dictionary<string, object>();
			dict.Add(GDMConstants.SchemaKey, "user_info");
			
            dict.Merge(true, nickname.ToGDEDict(nicknameKey));

            dict.Merge(true, ln_play_score.ToGDEDict(ln_play_scoreKey));
            dict.Merge(true, ln_gold.ToGDEDict(ln_goldKey));
            return dict;
		}

        public override void UpdateCustomItems(bool rebuildKeyList)
        {
        }

        public override void LoadFromDict(string dataKey, Dictionary<string, object> dict)
        {
            _key = dataKey;

			if (dict == null)
				LoadFromSavedData(dataKey);
			else
			{
                dict.TryGetString(nicknameKey, out _nickname);

                dict.TryGetFloatList(ln_play_scoreKey, out ln_play_score);
                dict.TryGetFloatList(ln_goldKey, out ln_gold);
                LoadFromSavedData(dataKey);
			}
		}

        public override void LoadFromSavedData(string dataKey)
		{
			_key = dataKey;
			
            _nickname = GDEDataManager.GetString(_key, nicknameKey, _nickname);

            ln_play_score = GDEDataManager.GetFloatList(_key, ln_play_scoreKey, ln_play_score);
            ln_gold = GDEDataManager.GetFloatList(_key, ln_goldKey, ln_gold);
        }

        public GDEuser_infoData ShallowClone()
		{
			string newKey = Guid.NewGuid().ToString();
			GDEuser_infoData newClone = new GDEuser_infoData(newKey);

            newClone.nickname = nickname;

            newClone.ln_play_score = new List<float>(ln_play_score);
			newClone.Set_ln_play_score();
            newClone.ln_gold = new List<float>(ln_gold);
			newClone.Set_ln_gold();

            return newClone;
		}

        public GDEuser_infoData DeepClone()
		{
			GDEuser_infoData newClone = ShallowClone();
            return newClone;
		}

        public void Reset_nickname()
        {
            GDEDataManager.ResetToDefault(_key, nicknameKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetString(nicknameKey, out _nickname);
        }

        public void Reset_ln_play_score()
        {
	        GDEDataManager.ResetToDefault(_key, ln_play_scoreKey);

	        Dictionary<string, object> dict;
	        GDEDataManager.Get(_key, out dict);
	        dict.TryGetFloatList(ln_play_scoreKey, out ln_play_score);
        }
		
        public void Reset_ln_gold()
        {
	        GDEDataManager.ResetToDefault(_key, ln_goldKey);

	        Dictionary<string, object> dict;
	        GDEDataManager.Get(_key, out dict);
	        dict.TryGetFloatList(ln_goldKey, out ln_gold);
        }
		

        public void ResetAll()
        {
            GDEDataManager.ResetToDefault(_key, nicknameKey);
            GDEDataManager.ResetToDefault(_key, ln_goldKey);
            GDEDataManager.ResetToDefault(_key, ln_play_scoreKey);


            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            LoadFromDict(_key, dict);
        }
    }
}
